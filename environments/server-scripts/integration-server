#!/bin/bash

# Unified Server Management Script for Integration Environment
# Usage: /opt/iflow/integration/server {start|stop|status|restart}

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
ENV_NAME="integration"
PORT=8082
PID_FILE="/tmp/iflow-integration.pid"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Function to check if server is running
is_running() {
    if [ -f "$PID_FILE" ]; then
        local pid=$(cat "$PID_FILE")
        if kill -0 "$pid" 2>/dev/null; then
            return 0
        else
            rm -f "$PID_FILE"
            return 1
        fi
    fi
    return 1
}

# Function to get server status
get_status() {
    if is_running; then
        local pid=$(cat "$PID_FILE")
        local port_status=$(lsof -ti:$PORT 2>/dev/null)
        if [ "$port_status" = "$pid" ]; then
            echo -e "${GREEN}Server is running (PID: $pid, Port: $PORT)${NC}"
            return 0
        else
            echo -e "${YELLOW}Server process exists but port $PORT is not listening${NC}"
            return 1
        fi
    else
        echo -e "${RED}Server is not running${NC}"
        return 1
    fi
}

# Function to start server
start_server() {
    if is_running; then
        echo -e "${RED}Server is already running${NC}"
        get_status
        return 1
    fi
    
    echo "Starting iflow Integration Environment..."
    
    # Change to the script directory
    cd "$SCRIPT_DIR"
    
    # Check if virtual environment exists, create if not
    if [ ! -d "venv" ]; then
        echo "Creating virtual environment..."
        python3 -m venv venv
    fi
    
    # Activate virtual environment
    source venv/bin/activate
    
    # Install iflow package if not already installed
    if ! pip show iflow > /dev/null 2>&1; then
        echo "Installing iflow package..."
        pip install /Users/claudio/realtime/reos2
    fi
    
    # Check if test database exists, clone if not
    if [ ! -d ".iflow-test" ]; then
        echo "Setting up test database..."
        git clone https://github.com/iflow-dev/iflow-test-db.git .iflow-test
    fi
    
    # Start the web server in background
    echo "Starting web server on port $PORT..."
    nohup python -m iflow.web_server --port $PORT --database .iflow-test --host 0.0.0.0 --title "iflow - Integration Environment" > /dev/null 2>&1 &
    
    # Save PID
    echo $! > "$PID_FILE"
    
    # Wait a moment and check status
    sleep 2
    if is_running; then
        echo -e "${GREEN}Server started successfully${NC}"
        get_status
    else
        echo -e "${RED}Failed to start server${NC}"
        rm -f "$PID_FILE"
        return 1
    fi
}

# Function to stop server
stop_server() {
    if ! is_running; then
        echo -e "${YELLOW}Server is not running${NC}"
        return 0
    fi
    
    local pid=$(cat "$PID_FILE")
    echo "Stopping server (PID: $pid)..."
    
    # Kill the process
    kill "$pid" 2>/dev/null
    
    # Wait for process to terminate
    local count=0
    while kill -0 "$pid" 2>/dev/null && [ $count -lt 10 ]; do
        sleep 1
        count=$((count + 1))
    done
    
    # Force kill if still running
    if kill -0 "$pid" 2>/dev/null; then
        echo "Force killing server..."
        kill -9 "$pid" 2>/dev/null
    fi
    
    # Remove PID file
    rm -f "$PID_FILE"
    
    echo -e "${GREEN}Server stopped${NC}"
}

# Function to restart server
restart_server() {
    echo "Restarting server..."
    stop_server
    sleep 2
    start_server
}

# Main script logic
case "${1:-}" in
    start)
        start_server
        ;;
    stop)
        stop_server
        ;;
    status)
        get_status
        ;;
    restart)
        restart_server
        ;;
    *)
        echo "Usage: $0 {start|stop|status|restart}"
        echo ""
        echo "Commands:"
        echo "  start   - Start the server (fails if already running)"
        echo "  stop    - Stop the server"
        echo "  status  - Show server status"
        echo "  restart - Restart the server (stops existing, starts new)"
        exit 1
        ;;
esac
