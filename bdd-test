#!/usr/bin/env python3
"""
BDD Test Runner Script

This script provides a simple interface to run BDD tests using the radish framework.
It automatically loads the venv-local virtual environment and changes to the tests/ directory
before running the specified feature files.

Usage:
    ./bdd-test <feature_file> [options]
    ./bdd-test features/test_artifact_flags.feature --scenarios 1
    ./bdd-test features/ --tags smoke
    ./bdd-test features/ --tags=smoke
    
Note: Tests tagged with @fixme are automatically excluded from test runs.
Tag expressions are automatically combined with "not fixme" exclusion.
"""

import os
import sys
import subprocess
from pathlib import Path

def print_help():
    """Print help information for the BDD test runner."""
    print("BDD Test Runner")
    print("=" * 50)
    print("Runs BDD tests using Radish framework with local server support.")
    print()
    print("USAGE:")
    print("  ./bdd-test <feature_file> [options]")
    print("  ./bdd-test --smoke                    # Run smoke tests only")
    print("  ./bdd-test --dry-run                  # Show what would be executed")
    print("  ./bdd-test --tid=0113                 # Run specific test by ID")
    print("  ./bdd-test --tags=\"@smoke\"           # Run tests with specific tags")
    print()
    print("EXAMPLES:")
    print("  ./bdd-test features/test_artifact_flags.feature")
    print("  ./bdd-test --smoke")
    print("  ./bdd-test --dry-run --smoke")
    print("  ./bdd-test --tid=0113")
    print("  ./bdd-test --tags=\"@smoke and not @fixme\"")
    print("  ./bdd-test features/test_artifact_creation.feature --scenarios 1")
    print()
    print("OPTIONS:")
    print("  --smoke                    Run only smoke tests (tagged with @smoke)")
    print("  --dry-run                  Show what would be executed without running tests")
    print("  --tid=<id>                 Run specific test by ID (e.g., --tid=0113)")
    print("  --feature=<id>             Run tests for specific feature ID (e.g., --feature=123)")
    print("  --tags=\"<expression>\"      Filter tests by tags")
    print("  --help, -h                 Show this help message")
    print()
    print("FEATURE FILES:")
    print("  If no feature file is specified, 'features/' is used as default.")
    print("  Feature files should be relative to the tests/ directory.")
    print()
    print("NOTES:")
    print("  - Tests run against a local server on port 7000")
    print("  - Chrome runs in headless mode by default")
    print("  - Use --foreground to run Chrome in visible mode")
    print("  - Test execution can take several minutes")


def activate_venv_local():
    """Activate the venv-local virtual environment."""
    venv_local = Path(__file__).parent / "venv-local"
    if not venv_local.exists():
        print(f"Error: venv-local directory not found at {venv_local}")
        sys.exit(1)
    
    # Get the Python executable from the virtual environment
    if sys.platform == "win32":
        python_exe = venv_local / "Scripts" / "python.exe"
    else:
        python_exe = venv_local / "bin" / "python"
    
    if not python_exe.exists():
        print(f"Error: Python executable not found at {python_exe}")
        sys.exit(1)
    
    print(f"Using virtual environment: {venv_local}")
    return str(python_exe)

def main():
    """Main entry point for the BDD test runner."""
    
    # Check for help flag
    if "--help" in sys.argv or "-h" in sys.argv:
        print_help()
        sys.exit(0)
    
    # Change to tests/ directory
    tests_dir = Path(__file__).parent / "tests"
    if not tests_dir.exists():
        print(f"Error: tests/ directory not found at {tests_dir}")
        sys.exit(1)
    
    os.chdir(tests_dir)
    print(f"Changed to directory: {os.getcwd()}")
    
    # Check if run_radish.py exists
    run_radish_script = tests_dir / "run_radish.py"
    if not run_radish_script.exists():
        print(f"Error: run_radish.py not found at {run_radish_script}")
        sys.exit(1)
    
    # Build the command
    if len(sys.argv) < 2:
        print_help()
        sys.exit(1)
    
    # Process arguments to remove "tests/" prefix if present
    processed_args = []
    for arg in sys.argv[1:]:
        processed_args.append(arg.replace("tests/", "", 1))
    
    if not processed_args:
        print("Usage: ./bdd-test <feature_file> [options]")
        print("Example: ./bdd-test features/test_artifact_flags.feature --scenarios 1")
        sys.exit(1)
    
    # Check if first argument is a feature path or an option
    if processed_args[0].startswith("--") or processed_args[0].startswith("-"):
        # First argument is an option, use default feature path
        feature_arg = "features/"
        # Don't remove the first argument since it's an option
    else:
        # First argument is a feature path
        feature_arg = processed_args[0]
        # Remove the first argument since we've processed it
        processed_args = processed_args[1:]
    
    # Parse remaining arguments to handle --smoke, --tags and --tid specially
    additional_args = []
    user_tags_expression = None
    tid_expression = None
    feature_expression = None
    smoke_mode = False
    dry_run = False
    
    i = 0
    while i < len(processed_args):
        arg = processed_args[i]
        if arg == "--smoke":
            # Enable smoke mode
            smoke_mode = True
        elif arg == "--dry-run":
            # Enable dry-run mode
            dry_run = True
        elif arg.startswith("--tid"):
            # Extract test ID from --tid argument
            if "=" in arg:
                # Format: --tid=0113
                tid_part = arg.split("=", 1)[1]
                # Remove surrounding quotes if present
                if tid_part.startswith('"') and tid_part.endswith('"'):
                    tid_part = tid_part[1:-1]
                elif tid_part.startswith("'") and tid_part.endswith("'"):
                    tid_part = tid_part[1:-1]
                tid_expression = f"tid:{tid_part}"
            else:
                # Format: --tid 0113
                # Look for the next argument as the tid value
                if i + 1 < len(processed_args) and not processed_args[i + 1].startswith("-"):
                    tid_value = processed_args[i + 1]
                    # Remove surrounding quotes if present
                    if tid_value.startswith('"') and tid_value.endswith('"'):
                        tid_value = tid_value[1:-1]
                    elif tid_value.startswith("'") and tid_value.endswith("'"):
                        tid_value = tid_value[1:-1]
                    tid_expression = f"tid:{tid_value}"
                    i += 1  # Skip the next argument since we consumed it
        elif arg.startswith("--tags"):
            # Extract tags from --tags argument
            if "=" in arg:
                # Format: --tags=smoke or --tags="@smoke and not @fixme"
                tags_part = arg.split("=", 1)[1]
                # Remove surrounding quotes if present
                if tags_part.startswith('"') and tags_part.endswith('"'):
                    tags_part = tags_part[1:-1]
                elif tags_part.startswith("'") and tags_part.endswith("'"):
                    tags_part = tags_part[1:-1]
                user_tags_expression = tags_part
            else:
                # Format: --tags smoke or --tags "@smoke and not @fixme"
                # Look for the next argument as the tag value
                if i + 1 < len(processed_args) and not processed_args[i + 1].startswith("-"):
                    tag_value = processed_args[i + 1]
                    # Remove surrounding quotes if present
                    if tag_value.startswith('"') and tag_value.endswith('"'):
                        tag_value = tag_value[1:-1]
                    elif tag_value.startswith("'") and tag_value.endswith("'"):
                        tag_value = tag_value[1:-1]
                    user_tags_expression = tag_value
                    i += 1  # Skip the next argument since we consumed it
        elif arg.startswith("--feature"):
            # Extract feature ID from --feature argument
            if "=" in arg:
                # Format: --feature=123
                feature_part = arg.split("=", 1)[1]
                # Remove surrounding quotes if present
                if feature_part.startswith('"') and feature_part.endswith('"'):
                    feature_part = feature_part[1:-1]
                elif feature_part.startswith("'") and feature_part.endswith("'"):
                    feature_part = feature_part[1:-1]
                feature_expression = f"feature:{feature_part}"
            else:
                # Format: --feature 123
                # Look for the next argument as the feature value
                if i + 1 < len(processed_args) and not processed_args[i + 1].startswith("-"):
                    feature_value = processed_args[i + 1]
                    # Remove surrounding quotes if present
                    if feature_value.startswith('"') and feature_value.endswith('"'):
                        feature_value = feature_value[1:-1]
                    elif feature_value.startswith("'") and feature_value.endswith("'"):
                        feature_value = feature_value[1:-1]
                    feature_expression = f"feature:{feature_value}"
                    i += 1  # Skip the next argument since we consumed it
        else:
            # Regular argument
            additional_args.append(arg)
        i += 1
    
    # Get the Python executable from venv-local
    python_exe = activate_venv_local()
    
    # Build the tags expression combining smoke mode, user tags, tid, and fixme exclusion
    tags_parts = []
    
    # Add smoke mode if enabled (note: no @ symbol for radish)
    if smoke_mode:
        tags_parts.append("(smoke)")
    
    # Add user tags if provided
    if user_tags_expression:
        tags_parts.append(f"({user_tags_expression})")
    
    # Add tid expression if provided
    if tid_expression:
        tags_parts.append(f"({tid_expression})")
    
    # Add feature expression if provided
    if feature_expression:
        tags_parts.append(f"({feature_expression})")
    
    # Always exclude fixme tags (note: no @ symbol for radish)
    tags_parts.append("(not fixme)")
    
    # Combine all parts with AND
    if len(tags_parts) == 1:
        tags_expression = tags_parts[0]
    else:
        tags_expression = " and ".join(tags_parts)
    
    # Build the full command using the virtual environment Python
    # Use quotes around the tags expression to handle spaces properly
    cmd = [python_exe, "run_radish.py", "local", feature_arg, f'--tags="{tags_expression}"']
    
    # Add dry-run flag if enabled
    if dry_run:
        cmd.append("--dry-run")
    
    # Add any additional arguments
    cmd.extend(additional_args)
    
    print(f"Running: {' '.join(cmd)}")
    print("-" * 50)
    
    # Execute the command
    try:
        result = subprocess.run(cmd, check=False)
        sys.exit(result.returncode)
    except KeyboardInterrupt:
        print("\nTest execution interrupted by user")
        sys.exit(1)
    except Exception as e:
        print(f"Error running tests: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()
