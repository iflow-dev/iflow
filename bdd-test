#!/usr/bin/env python3
"""
BDD Test Runner Script

This script provides a simple interface to run BDD tests using the radish framework.
It automatically loads the venv-local virtual environment and changes to the tests/ directory
before running the specified feature files.

Usage:
    ./bdd-test <feature_file> [options]
    ./bdd-test features/test_artifact_flags.feature --scenarios 1
    ./bdd-test features/ --tags smoke
    ./bdd-test features/ --tags=smoke
    
Note: Tests tagged with @fixme are automatically excluded from test runs.
Tag expressions are automatically combined with "not fixme" exclusion.
"""

import os
import sys
import subprocess
from pathlib import Path

def print_help():
    """Print help information for the BDD test runner."""
    print("BDD Test Runner")
    print("=" * 50)
    print("This script provides a simple interface to run BDD tests using the radish framework.")
    print("It automatically loads the venv-local virtual environment and changes to the tests/ directory")
    print("before running the specified feature files.")
    print()
    print("Usage:")
    print("    ./bdd-test <feature_file> [options]")
    print("    ./bdd-test features/test_artifact_flags.feature --scenarios 1")
    print("    ./bdd-test features/ --tags smoke")
    print("    ./bdd-test features/ --tags=smoke")
    print("    ./bdd-test --help")
    print()
    print("Options:")
    print("    --help, -h          Show this help message")
    print("    --tags <tags>       Run tests with specific tags")
    print("    --tags=<tags>       Run tests with specific tags (alternative format)")
    print("    --scenarios <n>     Run only the specified scenario(s)")
    print("    --trace             Show detailed traceback on failures")
    print()
    print("Examples:")
    print("    ./bdd-test features/                    # Run all features")
    print("    ./bdd-test features/ --tags smoke       # Run only smoke tests")
    print("    ./bdd-test features/ --tags=regression  # Run only regression tests")
    print("    ./bdd-test features/ --tags smoke regression  # Run smoke AND regression tests")
    print()
    print("Notes:")
    print("    - Tests tagged with @fixme are automatically excluded from test runs")
    print("    - Tag expressions are automatically combined with 'not fixme' exclusion")
    print("    - The script automatically activates the venv-local virtual environment")
    print("    - All arguments are forwarded to radish after processing")


def activate_venv_local():
    """Activate the venv-local virtual environment."""
    venv_local = Path(__file__).parent / "venv-local"
    if not venv_local.exists():
        print(f"Error: venv-local directory not found at {venv_local}")
        sys.exit(1)
    
    # Get the Python executable from the virtual environment
    if sys.platform == "win32":
        python_exe = venv_local / "Scripts" / "python.exe"
    else:
        python_exe = venv_local / "bin" / "python"
    
    if not python_exe.exists():
        print(f"Error: Python executable not found at {python_exe}")
        sys.exit(1)
    
    print(f"Using virtual environment: {venv_local}")
    return str(python_exe)

def main():
    """Main entry point for the BDD test runner."""
    
    # Check for help flag
    if "--help" in sys.argv or "-h" in sys.argv:
        print_help()
        sys.exit(0)
    
    # Change to tests/ directory
    tests_dir = Path(__file__).parent / "tests"
    if not tests_dir.exists():
        print(f"Error: tests/ directory not found at {tests_dir}")
        sys.exit(1)
    
    os.chdir(tests_dir)
    print(f"Changed to directory: {os.getcwd()}")
    
    # Check if run_radish.py exists
    run_radish_script = tests_dir / "run_radish.py"
    if not run_radish_script.exists():
        print(f"Error: run_radish.py not found at {run_radish_script}")
        sys.exit(1)
    
    # Build the command
    if len(sys.argv) < 2:
        print_help()
        sys.exit(1)
    
    # Process arguments to remove "tests/" prefix if present
    processed_args = []
    for arg in sys.argv[1:]:
        processed_args.append(arg.replace("tests/", "", 1))
    
    if not processed_args:
        print("Usage: ./bdd-test <feature_file> [options]")
        print("Example: ./bdd-test features/test_artifact_flags.feature --scenarios 1")
        sys.exit(1)
    
    # The first argument is the feature file/path
    feature_arg = processed_args[0]
    
    # Parse remaining arguments to handle --tags specially
    additional_args = []
    user_tags = []
    
    i = 1
    while i < len(processed_args):
        arg = processed_args[i]
        if arg.startswith("--tags"):
            # Extract tags from --tags argument
            if "=" in arg:
                # Format: --tags=smoke
                tags_part = arg.split("=", 1)[1]
                user_tags.extend(tags_part.split())
            else:
                # Format: --tags smoke
                # Look for the next argument as the tag value
                if i + 1 < len(processed_args) and not processed_args[i + 1].startswith("-"):
                    user_tags.append(processed_args[i + 1])
                    i += 1  # Skip the next argument since we consumed it
        else:
            # Regular argument
            additional_args.append(arg)
        i += 1
    
    # Get the Python executable from venv-local
    python_exe = activate_venv_local()
    
    # Build the tags expression combining user tags with fixme exclusion
    tags_expression = "not fixme"
    if user_tags:
        tags_expression = f"({user_tags[0]})"
        for tag in user_tags[1:]:
            tags_expression += f" and ({tag})"
        tags_expression += " and (not fixme)"
    
    # Build the full command using the virtual environment Python
    # Use quotes around the tags expression to handle spaces properly
    cmd = [python_exe, "run_radish.py", "local", feature_arg, f'--tags="{tags_expression}"'] + additional_args
    
    print(f"Running: {' '.join(cmd)}")
    print("-" * 50)
    
    # Execute the command
    try:
        result = subprocess.run(cmd, check=False)
        sys.exit(result.returncode)
    except KeyboardInterrupt:
        print("\nTest execution interrupted by user")
        sys.exit(1)
    except Exception as e:
        print(f"Error running tests: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()
